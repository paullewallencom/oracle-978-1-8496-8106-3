CREATE OR REPLACE PACKAGE BODY plug_ext_form_numberfield AS

FUNCTION render (
  p_item                in apex_plugin.t_page_item,
  p_plugin              in apex_plugin.t_plugin,
  p_value               in varchar2,
  p_is_readonly         in boolean,
  p_is_printer_friendly in boolean )
  return apex_plugin.t_page_item_render_result
IS
  l_result apex_plugin.t_page_item_render_result;

  subtype attr is
    apex_application_page_items.attribute_01%type;

  -- assign local names to attributes
  l_allow_decimals    attr := p_item.attribute_01;
  l_allow_negative    attr := p_item.attribute_02;
  l_decimal_precision attr := p_item.attribute_03;
  l_min_value         attr := p_item.attribute_04;
  l_max_value         attr := p_item.attribute_05;
  l_align             attr := p_item.attribute_06;

  -- Only use escaped value for the HTML output!
  l_code          varchar2(32767);
  l_escaped_value varchar2(32767)
                    := sys.htf.escape_sc(p_value);
  l_name          varchar2(30);
BEGIN
  -- Debug information
  if apex_application.g_debug then
    apex_plugin_util.debug_page_item (
      p_plugin              => p_plugin,
      p_page_item           => p_item,
      p_value               => p_value,
      p_is_readonly         => p_is_readonly,
      p_is_printer_friendly => p_is_printer_friendly );
  end if;

  if p_is_readonly or p_is_printer_friendly then
    -- emit hidden field if necessary
    apex_plugin_util.print_hidden_if_readonly (
      p_item_name           => p_item.name,
      p_value               => p_value,
      p_is_readonly         => p_is_readonly,
      p_is_printer_friendly => p_is_printer_friendly );

    -- emit display span with the value
    apex_plugin_util.print_display_only (
      p_item_name        => p_item.name,
      p_display_value    => p_value,
      p_show_line_breaks => false,
      p_escape           => true,
      p_attributes       => p_item.element_attributes );

  else
    -- If a page item saves state, we have to call the
    -- get_input_name_for_page_item to render the internal
    -- hidden p_arg_names field. It will also return the
    -- HTML field name which we have to use when we render
    -- the HTML input field.
    l_name := apex_plugin.get_input_name_for_page_item(false);
    sys.htp.p('<input type="text" name="'||l_name||
       '" id="'||p_item.name||'" '||
       'value="'||l_escaped_value||
       '" size="'||p_item.element_width||'" '||
       'maxlength="'||p_item.element_max_length||'" '||
       coalesce(p_item.element_attributes,
                'class="x-form-text"')||' />');

    -- build Ext.form.NumberField properties
    l_code := wwv_flow_javascript.add_attribute(
        'applyTo', p_item.name)
    ||wwv_flow_javascript.add_attribute(
        'allowDecimals'
        ,case when l_allow_decimals = 'N' then 'false' end)
    ||wwv_flow_javascript.add_attribute(
        'allowNegative'
        ,case when l_allow_negative = 'N' then 'false' end)
    ||wwv_flow_javascript.add_attribute(
        'decimalPrecision', l_decimal_precision)
    ||wwv_flow_javascript.add_attribute(
        'minValue',l_min_value)
    ||wwv_flow_javascript.add_attribute(
        'maxValue',l_max_value)
    ||wwv_flow_javascript.add_attribute(
        'value',l_escaped_value);

    -- can't use add_attribute() as it escapes double quotes
    if l_align is not null then
       l_code := l_code||'"style": {"text-align":"'
       ||l_align||'"},';
    end if;

    l_code := l_code||wwv_flow_javascript.add_attribute(
       p_name      => 'ajaxIdentifier',
       p_value     => apex_plugin.get_ajax_identifier,
       p_add_comma => false);


    l_code :=
      'Ext.onReady(function(){new Ext.form.NumberField({'
      ||l_code||'});});';

    -- Initialize page item when the page has been rendered.
    apex_javascript.add_onload_code(p_code => l_code);

    -- Tell APEX engine that field is navigable, in case
    -- it's the first item on the page, and APEX page is
    -- configured to navigate to first item (by default).
    l_result.is_navigable := true;
  end if;

  return l_result;
END render;


FUNCTION ajax (
  p_item   in apex_plugin.t_page_item,
  p_plugin in apex_plugin.t_plugin )
  return apex_plugin.t_page_item_ajax_result
IS
  l_result apex_plugin.t_page_item_ajax_result;
BEGIN
  -- @note - not using AJAX for this widget
  -- usually logic goes here

  -- not used by APEX yet
  return l_result;
END ajax;


FUNCTION validate (
  p_item   in     apex_plugin.t_page_item,
  p_plugin in     apex_plugin.t_plugin,
  p_value  in     varchar2 )
  return apex_plugin.t_page_item_validation_result
IS
  subtype attr is
    apex_application_page_items.attribute_01%type;

  -- assign local names to attributes
  l_allow_decimals attr   := p_item.attribute_01;
  l_allow_negative attr   := p_item.attribute_02;
  l_precision      number := to_number(p_item.attribute_03);
  l_min_value      number := to_number(p_item.attribute_04);
  l_max_value      number := to_number(p_item.attribute_05);

  n number;
  l_result apex_plugin.t_page_item_validation_result;
BEGIN
  -- Debug information
  if apex_application.g_debug then
    apex_plugin_util.debug_page_item (
       p_plugin    => p_plugin,
       p_page_item => p_item );
  end if;

  -- Nothing to do when null (APEX checks for mandatory items)
  if p_value is null then return l_result; end if;

  -- verify value is numeric
  begin
    n := to_number(p_value);
  exception
    when value_error then
       l_result.message := 'Value for '||
         p_item.plain_label||' must be a number';
       return l_result;
  end;

  case when l_allow_decimals = 'N' and n <> trunc(n) then
       l_result.message := 'Decimals not allowed for '||
         p_item.plain_label;
  when l_precision is not null
       and n <> trunc(n,l_decimal_precision) then
       l_result.message := 'Decimals places cannot exceed '||
         l_precision||' for '||p_item.plain_label;
  when l_allow_negative = 'N' and n <> abs(n) then
       l_result.message := 'Negative numbers not allowed'||
         ' for '||p_item.plain_label;
  when l_min_value is not null and n < l_min_value then
       l_result.message := 'The minimum value for '||
         p_item.plain_label||' is '||l_min_value;
  when l_max_value is not null and n > l_max_value then
       l_result.message := 'The maximum value for '||
         p_item.plain_label||' is '||l_max_value;
  else null;
  end case;

  -- return l_result with error message, success => null
  return l_result;
END validate;

END plug_ext_form_numberfield;
/
